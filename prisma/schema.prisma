// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//ONE TO MANY relationship with BlogPost
//ONE TO MANY relationship with Comment
model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  firstName  String
  middleName String?
  lastName   String
  password   String
  blogPosts  BlogPost[]
  Comment    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

//MANY TO ONE Relationship with User
//ONE TO MANY relationship with Comment
model BlogPost {
  id          Int     @id @default(autoincrement())
  title       String
  content     String? @db.Text
  isPublished Boolean @default(false)
  views       Int     @default(0)
  imageUrl    String?
  authorId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]

  @@map("blog_posts")
}

// MANY TO ONE relationship with User
// MANY TO ONE relationship with Comment
model Comment {
  id       Int    @id @default(autoincrement())
  content  String @db.Text
  authorId Int
  postId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  author   User     @relation(fields: [authorId], references: [id])
  blogPost BlogPost @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Book {
  id     Int    @id @default(autoincrement())
  name   String
  author String

  @@map("books")
}
